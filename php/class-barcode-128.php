<?php
/**
 * BarCode Coder Library : 128
 *
 * @package Barcode
 * @subpackage Barcode_128
 * @since 2.0.0
 */

/**
 * Core class used to implement the Barcode_128 object.
 *
 * @since 2.0.0
 */
class Barcode_128
{
    static private $encoding = array(
        // descriptive encoding array, helpful when debugging
        // Value Table A Table B Table C ASCII Code  Character   Pattern
        '11011001100', //  0    Space   Space   00  0032 or 0212    Space or O  11011001100
        '11001101100', //  1    !   !   01  0033    !   11001101100
        '11001100110', //  2    "   "   02  0034    "   11001100110
        '10010011000', //  3    #   #   03  0035    #   10010011000
        '10010001100', //  4    $   $   04  0036    $   10010001100
        '10001001100', //  5    %   %   05  0037    %   10001001100
        '10011001000', //  6    &   &   06  0038    &   10011001000
        '10011000100', //  7    '   '   07  0039    '   10011000100
        '10001100100', //  8    (   (   08  0040    (   10001100100
        '11001001000', //  9    )   )   09  0041    )   11001001000
        '11001000100', //  10   *   *   10  0042    *   11001000100
        '11000100100', //  11   +   +   11  0043    +   11000100100
        '10110011100', //  12   ,   ,   12  0044    ,   10110011100
        '10011011100', //  13   -   -   13  0045    -   10011011100
        '10011001110', //  14   .   .   14  0046    .   10011001110
        '10111001100', //  15   /   /   15  0047    /   10111001100
        '10011101100', //  16   0   0   16  0048    0   10011101100
        '10011100110', //  17   1   1   17  0049    1   10011100110
        '11001110010', //  18   2   2   18  0050    2   11001110010
        '11001011100', //  19   3   3   19  0051    3   11001011100
        '11001001110', //  20   4   4   20  0052    4   11001001110
        '11011100100', //  21   5   5   21  0053    5   11011100100
        '11001110100', //  22   6   6   22  0054    6   11001110100
        '11101101110', //  23   7   7   23  0055    7   11101101110
        '11101001100', //  24   8   8   24  0056    8   11101001100
        '11100101100', //  25   9   9   25  0057    9   11100101100
        '11100100110', //  26   :   :   26  0058    :   11100100110
        '11101100100', //  27   ;   ;   27  0059    ;   11101100100
        '11100110100', //  28   <   <   28  0060    <   11100110100
        '11100110010', //  29   =   =   29  0061    =   11100110010
        '11011011000', //  30   >   >   30  0062    >   11011011000
        '11011000110', //  31   ?   ?   31  0063    ?   11011000110
        '11000110110', //  32   @   @   32  0064    @   11000110110
        '10100011000', //  33   A   A   33  0065    A   10100011000
        '10001011000', //  34   B   B   34  0066    B   10001011000
        '10001000110', //  35   C   C   35  0067    C   10001000110
        '10110001000', //  36   D   D   36  0068    D   10110001000
        '10001101000', //  37   E   E   37  0069    E   10001101000
        '10001100010', //  38   F   F   38  0070    F   10001100010
        '11010001000', //  39   G   G   39  0071    G   11010001000
        '11000101000', //  40   H   H   40  0072    H   11000101000
        '11000100010', //  41   I   I   41  0073    I   11000100010
        '10110111000', //  42   J   J   42  0074    J   10110111000
        '10110001110', //  43   K   K   43  0075    K   10110001110
        '10001101110', //  44   L   L   44  0076    L   10001101110
        '10111011000', //  45   M   M   45  0077    M   10111011000
        '10111000110', //  46   N   N   46  0078    N   10111000110
        '10001110110', //  47   O   O   47  0079    O   10001110110
        '11101110110', //  48   P   P   48  0080    P   11101110110
        '11010001110', //  49   Q   Q   49  0081    Q   11010001110
        '11000101110', //  50   R   R   50  0082    R   11000101110
        '11011101000', //  51   S   S   51  0083    S   11011101000
        '11011100010', //  52   T   T   52  0084    T   11011100010
        '11011101110', //  53   U   U   53  0085    U   11011101110
        '11101011000', //  54   V   V   54  0086    V   11101011000
        '11101000110', //  55   W   W   55  0087    W   11101000110
        '11100010110', //  56   X   X   56  0088    X   11100010110
        '11101101000', //  57   Y   Y   57  0089    Y   11101101000
        '11101100010', //  58   Z   Z   58  0090    Z   11101100010
        '11100011010', //  59   [   [   59  0091    [   11100011010
        '11101111010', //  60   \   \   60  0092    \   11101111010
        '11001000010', //  61   ]   ]   61  0093    ]   11001000010
        '11110001010', //  62   ^   ^   62  0094    ^   11110001010
        '10100110000', //  63   _   _   63  0095    _   10100110000
        '10100001100', //  64   nul `   64  0096    `   10100001100
        '10010110000', //  65   soh a   65  0097    a   10010110000
        '10010000110', //  66   stx b   66  0098    b   10010000110
        '10000101100', //  67   etx c   67  0099    c   10000101100
        '10000100110', //  68   eot d   68  0100    d   10000100110
        '10110010000', //  69   eno e   69  0101    e   10110010000
        '10110000100', //  70   ack f   70  0102    f   10110000100
        '10011010000', //  71   bel g   71  0103    g   10011010000
        '10011000010', //  72   bs  h   72  0104    h   10011000010
        '10000110100', //  73   ht  i   73  0105    i   10000110100
        '10000110010', //  74   lf  j   74  0106    j   10000110010
        '11000010010', //  75   vt  k   75  0107    k   11000010010
        '11001010000', //  76   ff  l   76  0108    l   11001010000
        '11110111010', //  77   cr  m   77  0109    m   11110111010
        '11000010100', //  78   s0  n   78  0110    n   11000010100
        '10001111010', //  79   s1  o   79  0111    o   10001111010
        '10100111100', //  80   dle p   80  0112    p   10100111100
        '10010111100', //  81   dc1 q   81  0113    q   10010111100
        '10010011110', //  82   dc2 r   82  0114    r   10010011110
        '10111100100', //  83   dc3 s   83  0115    s   10111100100
        '10011110100', //  84   dc4 t   84  0116    t   10011110100
        '10011110010', //  85   nak u   85  0117    u   10011110010
        '11110100100', //  86   syn v   86  0118    v   11110100100
        '11110010100', //  87   etb w   87  0119    w   11110010100
        '11110010010', //  88   can x   88  0120    x   11110010010
        '11011011110', //  89   em  y   89  0121    y   11011011110
        '11011110110', //  90   sub z   90  0122    z   11011110110
        '11110110110', //  91   esc {   91  0123    {   11110110110
        '10101111000', //  92   fs  |   92  0124    |   10101111000
        '10100011110', //  93   gs  }   93  0125    }   10100011110
        '10001011110', //  94   rs  ~   94  0126    ~   10001011110
        '10111101000', //  95   us  del 95  0200    E   10111101000
        '10111100010', //  96   Fnc 3   Fnc 3   96  0201    E   10111100010
        '11110101000', //  97   Fnc 2   Fnc2    97  0202    E   11110101000
        '11110100010', //  98   Shift   Shift   98  0203    E   11110100010
        '10111011110', //  99   Code C  Code C  99  0204    I   10111011110
        '10111101110', //  100  Code B  Fnc 4   Code B  0205    I   10111101110
        '11101011110', //  101  Fnc 4   Code A  Code A  0206    I   11101011110
        '11110101110', //  102  Fnc 1   Fnc 1   Fnc 1   0207    I   11110101110
        '11010000100', //  103  Start A Start A Start A 0208    D   11010000100
        '11010010000', //  104  Start B Start B Start B 0209    N   11010010000
        '11010011100', //  105  Start C Start C Start C 0210    O   11010011100
        '11000111010');//  106  Stop    Stop    Stop    0211    O   1100011101011

    static public function getDigit( $code )
    {
        $tableB = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

        $result = "";

        $sum = 0;

        $isum = 0;

        $i = 0;

        $j = 0;

        $value = 0;

        // check each characters

        $len = strlen( $code );

        // we allow now extended ASCII so no need to check against table B
        // for ( $i=0; $i<$len; $i++ )
        // {
        // if ( strpos( $tableB, $code[ $i ] ) === false ) return '';
        // }

        // check firsts characters : start with C table only if enough numeric

        $tableCActivated = $len > 1;

        $c = '';

        for ( $i = 0; $i < 3 && $i < $len; $i++ )
        {
            $tableCActivated &= preg_match( '`[0-9]`', $code[ $i ] );
        }

        $sum = $tableCActivated ? 105 : 104;

        // start : [ 105 ] : C table or [ 104 ] : B table

        $result = self::$encoding[ $sum ];

        $i = 0;

        while ( $i < $len )
        {
            if ( ! $tableCActivated )
            {
                $j = 0;

                // check next character to activate C table if interresting

                while ( ( $i + $j < $len ) && preg_match( '`[0-9]`', $code[ $i + $j ] ) )
                {
                    $j++;
                }

                // 6 min everywhere or 4 mini at the end

                $tableCActivated = ( $j > 5 ) || ( ( $i + $j - 1 == $len ) && ( $j > 3 ) );

                if ( $tableCActivated )
                {
                    // C table

                    $result .= self::$encoding[ 99 ];

                    $sum += ++$isum * 99;
                }

                // 2 min for table C so need table B
            }
            else if ( ( $i == $len - 1 ) || ( preg_match( '`[^0-9]`', $code[ $i ] ) ) || ( preg_match( '`[^0-9]`', $code[ $i + 1 ] ) ) )
            {
                //todo : verifier le JS : len - 1!!! XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

                $tableCActivated = false;

                // B table

                $result .= self::$encoding[ 100 ];

                $sum += ++$isum * 100;
            }

            if ( $tableCActivated )
            {
                 // Add two characters ( numeric )

                $value = intval( substr( $code, $i, 2 ) );

                $i += 2;
            }
            else
            {
                // take care of extended characters ( ASCII above 127 )

                if ( ord( $code[ $i ] ) > 126 )
                {
                    $result .= self::$encoding[ 100 ];

                    $sum += ++$isum * 100;

                    // Add one character

                    $value = strpos( $tableB, chr( ord( $code[ $i ] ) - 128 ) );
                }
                else
                {
                    // Add one character

                    $value = strpos( $tableB, $code[ $i ] );
                }

                $i++;
            }

            $result .= self::$encoding[ $value ];

            $sum += ++$isum * $value;
        }

        // Add CRC

        $result  .= self::$encoding[ $sum % 103 ];

        // Stop

        $result .= self::$encoding[ 106 ];

        // Termination bar

        $result .= '11';

        return $result;
    }
}